
/*

Q11) Save Delhi City

	 Suppose you are Shaktimaan and you have decided to do something to save your
	 favorite city (Delhi) against the attack of Tamraj Kilvish, since no one else
	 surprisingly seems bothered about it, and are just suffering through various attacks by
	 various different creatures.

	 Seeing your passion, N people of Delhi decided to come forward to try their best in
	 saving their city. Now you have decided to strategize these N people into a formation
	 of AT LEAST K people in a group. Otherwise, that group won't survive.
	 Let's demonstrate this by an example. Let's say that there were 10 people, and each
	 group required at least 3 people in it for its survival. Then, the following 5 groups can
	 be made:
	 •  10 - Single group of 10 members.
	 •  7, 3 - Two groups. One consists of 7 members, the other one of 3 members.
	 •  6, 4 - Two groups. One consists of 6 members, the other one of 4 members.
	 •  5, 5 - Two groups. One consists of 5 members, the other one of 5 members.
	 •  4, 3, 3 - Three groups. One consists of 4 members, the other two of 3 members.
 
	 Given the value of N, and K - find out the number of ways you can form these groups
	 (anti-squads) to save Delhi city.

*/

/*
	Approach:

			Technique Used: Dynamic Programming
							( Because there exists overlapping subproblems).
							(optimal solution of each subproblem is stored in table for
							 future references).

			Performed using iteration and recursion.

			For Example :

				Let say n = 6, k = 2:

				First a matrix of 6X6 is created with the above specified initial values.

				arr =  	    1   2   3   4   5   6
						  -------------------------
						1 | 1   0   0   0   0   0 |
						2 | 0   1   0   0   0   0 |
						3 | 0   0   1   0   0   0 |
						4 | 0   0   0   1   0   0 |
						5 | 0   0   0   0   1   0 |
						6 | 0   0   0   0   0   1 |
						  -------------------------

				Iteration: i = 1
						   j = 0

						    1   2   3   4   5   6
						  -------------------------
						1 | 1   0   0   0   0   0 |
						2 | 0   1   0   0   0   0 |
						3 | 0   0   1   0   0   0 |
						4 | 0   0   0   1   0   0 |
						5 | 0   0   0   0   1   0 |
						6 | 0   0   0   0   0   1 |
						  -------------------------  


				Iteration: i = 2
						   j = 1

						    1   2   3   4   5   6
						  -------------------------
						1 | 1   0   0   0   0   0 |
						2 | 1   1   0   0   0   0 |
						3 | 0   0   1   0   0   0 |
						4 | 0   0   0   1   0   0 |
						5 | 0   0   0   0   1   0 |
						6 | 0   0   0   0   0   1 |
						  -------------------------  

				Iteration: i = 3
						   j = 1,2

						    1   2   3   4   5   6
						  -------------------------
						1 | 1   0   0   0   0   0 |
						2 | 2   1   0   0   0   0 |
						3 | 3   1   1   0   0   0 |
						4 | 5   2   1   1   0   0 |
						5 | 7   2   1   1   1   0 |
						6 | 11  4   2   1   1   1 |
						  -------------------------  

				return arr[6,2] : thus ans is '4' 		  


			Time Complexity:  theta(n^2)
			Space Complexity: theta(n^2)

*/